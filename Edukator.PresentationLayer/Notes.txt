-N Tier Architecture (N Katmanlý Mimari) Avantajlarý ;
	* Hata yönetimini kolaylaþtýrýr.
	* Eriþilebilirlik kolaylaþýr.
	* Kod tekrarý azalýr.
	* Sürdürülebilirlik ve projede büyük çaplý deðiþimler kolaylaþýr.
	* Güvenlik artar.

-N katmanlý mimaride temel olarak 4 katman bulunmaktadýr. Bunlar;
	* Entity Layer
	* Data Access Layer
	* Business Layer
	* Presentation Layer
- Projenin büyüklüðüne göre baþka katmanlar da eklenebilir. Bunlara birkaç örnek olarak;
	* Api için katman
	* Data Transfer object Layer 

-Entity layer: Bu katmanda tablolar ve sütunlar tutulur.
-Data Access Layer: Bu katmanda CRUD iþlemleri yapýlýr.
-Business Layer: Bu katmanda yetki kontrolleri ve validasyon kontrolleri yapýlýr.
-Presentation Layer: Bu katmanda arayüz bulunur. UI iþlemleri yapýlýr.

-Code First yapýsý: Projedeki database iþlemlerinin hepsi kod tarafýnda yapýlýr. Sql bu durumda sadece bir Veri Tabaný dýr. 
- Katmanlarda iki tane temel dosya oluþturulur. Concrete ve Abstract. Concrete klasörü içinde projede bulunacak sýnýflar tutulur. Abstract da ise projede bulunacak interfaceler tutulur.

-Access Modifier (Eriþim Belirleyiciler): Temel de 4 tane vardýr. Bunlar;
	-Public: Her yerden eriþilebilmesini saðlar.
	-Private: Sadece bulunduðu class veya interface den içinde eriþilebilir.
	-internal: Sadece bulunduðu katmandan eriþim saðlanýr.
	-protected: Bulunduðu sýnýf ve bu sýnýfý miras alan sýnýflar eriþebilir.

-Katmanlý mimari projelerinde katmanlar içinde sýnýflar tek baþýna oluþturulmaz. Katmanlar içinde klasörler oluþturulur. Oluþan klasörlerde sýnýflar oluþturulur. Bu sebeple projede default oluþan sýnýflarý sildik.

-Code First de Sýnýflar-->Tablolara, Propertyler ise Sütunlara dönüþür.

	Code First de db oluþturmak için ihtiyacýmýz olan paketler;
-EntityFramework Core: EF ile ilgili iþlemleri yapar.
-EntityFramework Tools:Migration iþlemlerini gerçekleþtirmemizi saðlar.
-EntityFramework Design:Migration iþlemlerini gerçekleþtirmemizi saðlar.
-Sql Server: Sql Server'ý kullanmamý saðlar.

-Migration: Göç anlamýna gelir. Verileri Visual Studio dan Sql Server'a taþýmamýzý saðlar.

-DAL Katmanýndaki Concrete klasöründe;
	* Entityler, baðlantý adresleri tutulur.
-DAL Katmanýndaki Abstract klasöründe;
	* Interfaceler tutulur.

-DbContext Sýnýfý: EF de bazý method ve özellikleri kullanmamý saðlayan bir sýnýf.

			---------------REFERANSLAR------------
-Referans Verme: Referans aldýðýn katmanýn içindeki sýnýf ,method ya da özelliklerini kullanmak amacýyla referans verilir.

-Katmanlar En temel katmandan ileriye doðru sýrasýyla aþadaki gibidir;

* EntityLayer:En temel katmandýr. Tüm katmanlar bu katmana eriþebilir. 
* DataAccessLayer : Bu katman sadece Business da ve presentation katmanlarýnda kullanýlabilir.       
* BusinessLayer: Bu katman da sadece Presentation katmanýnda kullanýlabilir.      
* PresentationLayer: Bu katmana yukarýdaki 3 katman da diðer katmanlarda eklenebilir. Baþka bir katmana referans edilemez!

-Katmanda Referans Nasýl Verilir: Referans ekleyeceðiniz katmanýn üzerine sað týk ise Add>Project Reference seçilerek istenilen katman eklenebilir.

-Migration Ekleme: Migration eklenen consol için View>Other Windows>Package Manager Console seçilmeli

- NOTT: Migration oluþturulmadan önce gelen ekrandaki Default Project kýsmýna database baðlantý adresi hangi katmanda ise o katmanýn alana seçilmesi gerekir.

- add-migration migration_adý : Migration eklemeye yarar.
- update-database: Bu ise eklenen migration'ý db de gözükmesi için

- NOT: Migration isimleri genelde yaptýðý isimleri nitelemeli. Boþ isimler olmamalý, anlaþýlýr olmalý!

- Repository Design Pattern: Bir tasarým desenidir. Projede yapýlacak CRUD iþlemlerinin arka planda tutulmasý için generic yapýda oluþturulup kalýtýlarak kullanýlmayý saðlar.
 
 -Business katmanýnda validasyon kurallarý kontrolü saðlanýr.
 -Business katmanýndaki interfaceler (Abstract klasörü içinde) Service olarak adlandýrýyor,
 sýnýflar(Concrete klasörü içinde) ise Manager olarak tanýmlanýr. Genel olarak bu þekilde oluþturuluyor.

 -Dependency Injection: Classlar arasýnda baðýmlýlýðý en aza indirmek için kullanýlan programlama tekniðidir.

					Projedeki akýþýn genel özeti
1- Entity katmanýnda Concrete klasörü altýnda entityler tanýmlanýr.
2-Data Access katmaný içindeki Concrete klsörü içinde Context sýnýfý oluþturarak sqlconnection ve entity katmanýnda oluþturduðum sýnýflar dbset de tanýmlanýr.
3-Context içinde entityler tanýmlandýktan sonra migration ile db ye tablolar oluþturulur.
4-Data Access katmaný içindeki Abstract klasörü altýnda Generic bir interface oluþturulur.
5-Data Access katmaný içindeki Abstract klasörü altýnda entitylere özel interfaceler oluþturularak generic interface miras alýnýr.
6- Data Access katmaný içindeki Repositories klasörü altýnda Generic Repository design paterni ile CRUD iþlemleri için Generic bir class oluþturulur.
7- Oluþturulan sýnýf Data Access katmanýndaki Abstract klasöründe oluþturduðumuz generic interface'i kalýtým yapar ve O interface içindeki methodlarý sýnýfa implemente ederek doldurur.
8-Data Access Layer katmanýnda Repositories klasöründe genericrepo sýnýfý bittikten sonra ayný katmanda Entity Framework klasöründe her entity'e özel sýnýf oluþturularak Repositories klasöründeki sýnýf ile kalýtým yapar.
9-Business katmanýndaki Abstract klasöründe Generic bir interface servisi oluþturulur ve Data Access katmanýndaki Abstract klasöründeki generic interface içindeki methodlar kopyalanarak baþýna bir T harfi konur.(Diðer katman ile karýþmamasý için!)
10- Business daki Abstract klasöründe Generic interface servisi oluþturduktan sonra her entity için bir interface servisi oluþturulup generic interface servisinden miras alýnýr.
11-Business katmanýndaki Abstract da servisler kurulduktan sonra ayný katmanda Concrete klasöründe de her entity'e özel Manager sýnýflar oluþturulur ve Generic interface servisinden miras alýnarak oradaki methodlar o sýnýflara implemente edilir.
12- Oluþturulan manager sýnýfýnda o entity'nin Data Access katmanýndaki interface inden nesne oluþturularak oradaki methodlar kullanýlýr.
13- Presentation katmanýna gelip oluþturulan controllerlarda istenilen entity'e ait Business katmanýndaki Service çaðýrýlýr.





An unhandled exception occurred while processing the request.
InvalidOperationException: Unable to resolve service for type 'Edukator.BusinessLayer.Abstract.ICategoryService' while attempting to activate 'Edukator.PresentationLayer.Controllers.CategoryController'. HATASI:

Bu hatanýn sebebi, Constructor uygulanan sýnýflarýn arka tarafta (Startup.cs de ConfigureServices methodunda) çaðýrýlmasý gerekli!


- asp-for özelliði: Asp.Net MVC de Html.Helper, Asp.Net Core da tek helperlar vardýr. Genelde inputlar ile kullanýlýyor. View de tanýmladýðýn modele ait alanlara ulaþýþabiliyor.
